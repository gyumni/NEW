import os
import re
from flask import Flask, jsonify, render_template, request

from cs50 import SQL
from helpers import lookup

import feedparser
import urllib.parse
# import pandas as pd

# Configure application
app = Flask(__name__)

# Configure CS50 Library to use SQLite database
db = SQL("sqlite:///mashup.db")


# Ensure responses aren't cached
@app.after_request
def after_request(response):
    response.headers["Cache-Control"] = "no-cache, no-store, must-revalidate"
    response.headers["Expires"] = 0
    response.headers["Pragma"] = "no-cache"
    return response


@app.route("/")
def index():
    """Render map"""
    return render_template("index.html")


@app.route("/articles")
def articles():
    """Look up articles for geo"""

    # Get geo for articles
    geo = request.args.get("geo")

    if not geo:
        return jsonify(False)
    else:

        # Feedparser url to geo = https://news.google.com/news/rss/local/section/geo/02138
        s = feedparser.parse(f"https://news.google.com/news/rss/local/section/geo/{geo}")

        entry = {}
        entry1 = []

        # Get five link and title of dict use .entries function
        for r in range(5):
            entry["link"] = s.entries[r].link
            entry["title"] = s.entries[r].title

            # Add new dict entry to entry1 list
            entry1.append(entry.copy())

    # Return json
    return jsonify(entry1)


@app.route("/search")
def search():
    """Search for places that match query"""

    # Get geo for articles
    qq = request.args.get("q")

    if not qq:
        return jsonify(False)
    else:
        # Url parse %20
        q = urllib.parse.unquote(qq)



        # https://www.geeksforgeeks.org/python-string-split/ # Splits at space
        qa = q.split()

        # Splits at ','
        qb = q.split(', ')

        # Tests which one can be used
        if qa:

            # Text len
            z = len(qa)

            # Check if z == 3
            if z == 3:

                # Where has three opptions
                qw = db.execute("SELECT * FROM places WHERE place_name = :qa1 and admin_name1 = :qa2 and admin_code1 = :qa3", qa1=qa[0], qa2=qa[1], qa3=qa[2])

            # Check if z == 2
            elif z == 2:

                # Where has two opptions
                qw = db.execute("SELECT * FROM places WHERE place_name = :qa1 and admin_name1 = :qa2", qa1=qa[0], qa2=qa[1])

                c = len(qw)

                if c == 0:
                    # Where has two opptions
                    qw = db.execute("SELECT * FROM places WHERE place_name = :qa1 and admin_code1 = :qa2", qa1=qa[0], qa2=qa[1])



            # If z == 1
            else:

                # Where has one opptions
                qw = db.execute("SELECT * FROM places WHERE place_name = :qa1", qa1=qa[0])

                if len(qw) == 0:
                    w = request.args.get("q") + "%"
                    qw = db.execute("SELECT * FROM places WHERE postal_code LIKE :w", w=w)

        # Else qb not NULL can be choosed of doning selecting And has ', ' spilt
        if qb:

            # Test len
            z1 = len(qb)

            # Check if z == 3
            if z1 == 3:

                # Where has three opptions
                qw1 = db.execute("SELECT * FROM places WHERE place_name = :qb1 and admin_name1 = :qb2 and admin_code1 = :qb3", qb1=qb[0], qb2=qb[1], qb3=qb[2])

                if len(qw1) == 0:
                    qw1 = db.execute("SELECT * FROM places WHERE place_name = :qb1 and admin_name1 = :qb2 and country_code = :qb3", qb1=qb[0], qb2=qb[1], qb3=qb[2])

            # Check if z == 2
            elif z1 == 2:

                # Where has two opptions
                qw1 = db.execute("SELECT * FROM places WHERE place_name = :qb1 and admin_name1 = :qb2", qb1=qb[0], qb2=qb[1])

                r = len(qw1)

                if r == 0:
                    # Where has two opptions
                    qw1 = db.execute("SELECT * FROM places WHERE place_name = :qb1 and admin_code1 = :qb2", qb1=qb[0], qb2=qb[1])


            # If z == 1
            else:

                # Where has one opptions
                qw1 = db.execute("SELECT * FROM places WHERE place_name = :qb1", qb1=qb[0])

                if len(qw1) == 0:
                    w = request.args.get("q") + "%"
                    qw1 = db.execute("SELECT * FROM places WHERE postal_code LIKE :w", w=w)

        # https://www.geeksforgeeks.org/python-string-split/ # Splits at space
        qc = q.split()

        # Nessary to check here after will be changed
        z3 = len(qc)


        if z3 > 1:

            # Tran
            qc[0] = qc[0] + " " + qc[1]
            if z3 > 2:
                qc.pop(1)


        # Splits at ','
        qd = q.split(', ')

        # Nessary to check here after will be changed
        z4 = len(qd)


        if z4 > 1:

            # Tran
            qd[0] = qd[0] + " " + qd[1]
            if z4 > 2:
                qd.pop(1)

        # Tests which one can be used
        if qc:

            # Text len
            z = len(qc)

            # Check if z == 3
            if z == 3:

                # Where has three opptions
                qw2 = db.execute("SELECT * FROM places WHERE place_name = :qc1 and admin_name1 = :qc2 and admin_code1 = :qc3", qc1=qc[0], qc2=qc[1], qc3=qc[2])

            # Check if z == 2
            elif z == 2:

                # Where has two opptions
                qw2 = db.execute("SELECT * FROM places WHERE place_name = :qc1 and admin_name1 = :qc2", qc1=qc[0], qc2=qc[1])

                j = len(qw2)

                if j == 0:
                    # Where has two opptions
                    qw2 = db.execute("SELECT * FROM places WHERE place_name = :qc1 and admin_code1 = :qc2", qc1=qc[0], qc2=qc[1])


            # If z == 1
            else:

                # Where has one opptions
                qw2 = db.execute("SELECT * FROM places WHERE place_name = :qc1", qc1=qc[0])

                if len(qw2) == 0:
                    w = request.args.get("q") + "%"
                    qw2 = db.execute("SELECT * FROM places WHERE postal_code LIKE :w", w=w)

        # Else qd not NULL can be choosed of doning selecting
        if qd:

            # Test len
            z1 = len(qd)

            # Check if z == 3
            if z1 == 3:

                # Where has three opptions
                qw3 = db.execute("SELECT * FROM places WHERE place_name = :qd1 and admin_name1 = :qd2 and admin_code1 = :qd3", qd1=qd[0], qd2=qd[1], qd3=qd[2])

                if len(qw3) == 0:
                    qw3 = db.execute("SELECT * FROM places WHERE place_name = :qd1 and admin_name1 = :qd2 and country_code = :qd3", qd1=qd[0], qd2=qd[1], qd3=qd[2])

            # Check if z == 2
            elif z1 == 2:

                # Where has two opptions
                qw3 = db.execute("SELECT * FROM places WHERE place_name = :qd1 and admin_name1 = :qd2", qd1=qd[0], qd2=qd[1])

                l = len(qw2)

                if l == 0:
                    # Where has two opptions
                    qw3 = db.execute("SELECT * FROM places WHERE place_name = :qd1 and admin_code1 = :qd2", qd1=qd[0], qd2=qd[1])

                    if len(qw3) == 0:
                        w = request.args.get("q") + "%"
                        qw3 = db.execute("SELECT * FROM places WHERE postal_code LIKE :w", w=w)

            # If z == 1
            else:

                # Where has one opptions
                qw3 = db.execute("SELECT * FROM places WHERE place_name = :qd1", qd1=qd[0])


        if len(qw3) != 0:
            return jsonify(qw3)
        elif len(qw2) != 0:
            return jsonify(qw2)
        elif len(qw1) != 0:
            return jsonify(qw1)
        elif len(qw) != 0:
            return jsonify(qw)
        else:
            return jsonify(False)


@app.route("/update")
def update():
    """Find up to 10 places within view"""

    # Ensure parameters are present
    if not request.args.get("sw"):
        raise RuntimeError("missing sw")
    if not request.args.get("ne"):
        raise RuntimeError("missing ne")

    # Ensure parameters are in lat,lng format
    if not re.search("^-?\d+(?:\.\d+)?,-?\d+(?:\.\d+)?$", request.args.get("sw")):
        raise RuntimeError("invalid sw")
    if not re.search("^-?\d+(?:\.\d+)?,-?\d+(?:\.\d+)?$", request.args.get("ne")):
        raise RuntimeError("invalid ne")

    # Explode southwest corner into two variables
    sw_lat, sw_lng = map(float, request.args.get("sw").split(","))

    # Explode northeast corner into two variables
    ne_lat, ne_lng = map(float, request.args.get("ne").split(","))

    # Find 10 cities within view, pseudorandomly chosen if more within view
    if sw_lng <= ne_lng:

        # Doesn't cross the antimeridian
        rows = db.execute("""SELECT * FROM places
                          WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude AND longitude <= :ne_lng)
                          GROUP BY country_code, place_name, admin_code1
                          ORDER BY RANDOM()
                          LIMIT 10""",
                          sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)

    else:

        # Crosses the antimeridian
        rows = db.execute("""SELECT * FROM places
                          WHERE :sw_lat <= latitude AND latitude <= :ne_lat AND (:sw_lng <= longitude OR longitude <= :ne_lng)
                          GROUP BY country_code, place_name, admin_code1
                          ORDER BY RANDOM()
                          LIMIT 10""",
                          sw_lat=sw_lat, ne_lat=ne_lat, sw_lng=sw_lng, ne_lng=ne_lng)

    # Output places as JSON
    return jsonify(rows)
